# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

import torch
from torch.types import _int, SymInt, _device
from collections import Sequence
from typing import Union, Optional

def enter_deferred_init() -> None: ...
def leave_deferred_init() -> None: ...
def enter_fake_mode(fake_mode: bool) -> None: ...
def leave_fake_mode() -> None: ...
def is_fake(tensor: torch.Tensor) -> bool: ...
def is_gen_by_random_op(tensor: torch.Tensor) -> bool: ...
def can_materialize(tensor: torch.Tensor) -> bool: ...
def materialize_tensor(tensor: torch.Tensor) -> torch.Tensor: ...
def materialize_tensor_with_local_shape(tensor: torch.Tensor, shape: Sequence[Union[_int, SymInt]], device: Optional[Union[_device, str, None]] = None) -> torch.Tensor: ...
def meta_like(fake: torch.Tensor) -> torch.Tensor: ...
